[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\nThink step by step and reason yourself to the correct decisions to make sure we get it right.\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\n\nYou will output the content of each file necessary to achieve the goal, including ALL code.\nRepresent files like so:\n\nFILENAME\n```\nCODE\n```\n\nThe following tokens must be replaced like so:\nFILENAME is the lowercase combined path and file name including the file extension\nCODE is the code in the file\n\nExample representation of a file:\n\nsrc/hello_world.py\n```\nprint(\"Hello World\")\n```\n\nDo not comment on what every file does. Please note that the code should be fully functional. No placeholders.\n\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nWhen you are done, write finish with \"this concludes a fully working implementation\".\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "create git repository for this project, in github", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "I'm sorry for the misunderstanding, but as an AI, I don't have the ability to directly interact with external platforms such as GitHub. However, I can guide you on how to create a new repository on GitHub.\n\n1. First, you need to sign in to your GitHub account. If you don't have one, you can create it at https://github.com/join.\n\n2. Once you're logged in, click on the '+' icon in the upper right corner of the page and select 'New repository'.\n\n3. Name your repository. You can name it anything you like, but it's usually best to choose a name that reflects the project you're working on.\n\n4. You can choose to make your repository public or private. Public repositories are visible to everyone, while private repositories are only visible to you and people you choose to share them with.\n\n5. You can choose to initialize your repository with a README, .gitignore, or license. A README is a document that introduces your project to visitors and explains how to use it. A .gitignore file tells Git which files or directories to ignore in your project. A license tells people what they can and cannot do with your project.\n\n6. Click 'Create repository' to create your new repository.\n\n7. Now you can clone the repository to your local machine and start adding files to it. To clone the repository, click the 'Code' button on your repository page, copy the URL, and then run `git clone [URL]` in your terminal.\n\n8. After adding files to your local repository and making changes, you can push these changes to your GitHub repository by running `git add .`, `git commit -m \"Your message\"`, and `git push origin master` in your terminal.\n\nI hope this helps! Let me know if you have any other questions.", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]